/*
 * Copyright 2023-2023 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.logaritex.ai.api.samples.codeinterpreter;

import java.io.FileOutputStream;
import java.io.IOException;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

import com.logaritex.ai.api.AssistantApi;
import com.logaritex.ai.api.Data;
import com.logaritex.ai.api.Data.Assistant;
import com.logaritex.ai.api.Data.Run;
import com.logaritex.ai.api.Data.ThreadRequest;
import com.logaritex.ai.api.FileApi;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

import org.springframework.core.io.DefaultResourceLoader;
import org.springframework.util.StreamUtils;

/**
 *
 * The "Code Interpreter" expands the Assistant's capabilities to include: accurate math, processing files, data
 * analysis, generating images...
 *
 * @author Christian Tzolov
 */
public class FintechCodeInterpreterTool {

	private static final Log logger = LogFactory.getLog(FintechCodeInterpreterTool.class);

	public static void main(String[] args) throws InterruptedException, IOException {

		logger.info("Create FileApi and AssistantApi with your OPENAI_API_KEY.");
		FileApi fileApi = new FileApi(System.getenv("OPENAI_API_KEY"));
		AssistantApi assistantApi = new AssistantApi(System.getenv("OPENAI_API_KEY"));

		logger.info("1. Upload the classpath:/MSFT.csv file.");
		var resourceLoader = new DefaultResourceLoader();
		Data.File file = fileApi.uploadFile(
				resourceLoader.getResource("classpath:/MSFT.csv"),
				Data.File.Purpose.ASSISTANTS);

		logger.info("2. Create assistant with the MSFT.csv file assigned and code-interpreter tool enabled.");
		Assistant assistant = assistantApi.createAssistant(new Data.AssistantRequestBody(
				"gpt-4-1106-preview",
				"Personal finance genius",
				"",
				"You help users with finance and stock exchange questions.",
				List.of(new Data.Tool(Data.Tool.Type.code_interpreter)),
				null,
				Map.of()));

		logger.info("3. Create an empty Thread (represents a session between your user and your application).");
		Data.Thread thread = assistantApi.createThread(new ThreadRequest(List.of(), Map.of()));

		logger.info("4. Add a new user Message to the Thread.");
		assistantApi.createMessage(
				new Data.MessageRequest(Data.Role.user,
						"Use the attached CSV file to generate a chart showing the MSFT stock value changing over time."),
				thread.id());

		logger.info("5. Start a new Run - representing the execution of a Thread with an Assistant.");
		Data.Run run = assistantApi.createRun(thread.id(), new Data.RunRequest(assistant.id()));

		logger.info("5.1. Wait until the run completes.");
		System.out.print("RunSteps count: ");
		while (assistantApi.retrieveRun(thread.id(), run.id()).status() != Run.Status.completed) {
			java.lang.Thread.sleep(3000);
			int runStepsCount = assistantApi.listRunSteps(thread.id(), run.id(), new Data.ListRequest()).data().size();
			System.out.print("[" + runStepsCount + "] ");
		}
		System.out.println();

		logger.info("6. Retrieve all 'assistant' and 'user' messages in the Thread");
		Data.DataList<Data.Message> messageList = assistantApi.listMessages(new Data.ListRequest(),
				thread.id());

		logger.info("6.1 Message count: " + messageList.data().size());

		logger.info("7. Retrieve the last message form the generated by assistant.");
		Data.Message lastAssistantMessage = assistantApi.retrieveMessage(thread.id(), messageList.first_id());

		String messageContentTypes = lastAssistantMessage.content().stream().map(c -> c.type().name())
				.collect(Collectors.joining(","));
		logger.info("7.1 type of content entires in the last assistant message: " + messageContentTypes);

		logger.info("7.2 Last assistant message text: " + lastAssistantMessage.content().stream()
				.filter(c -> c.type() == Data.Content.Type.text).findFirst()
				.get().text().value());

		logger.info("7.3 Retrieve the chart file_id form the last assistant message's ImageFile content.");
		String chartImageId = lastAssistantMessage.content().stream()
				.filter(c -> c.type() == Data.Content.Type.image_file).findFirst()
				.get().image_file()
				.file_id();

		logger.info("7.4 Retrieve the chart diagram file content and save it as a './msft-chart.png' file.");
		byte[] fileContent = fileApi.retrieveFileContent(chartImageId);
		var fos = new FileOutputStream("msft-chart.png");
		StreamUtils.copy(fileContent, fos);
		fos.close();

		logger.info("RunSteps: " + assistantApi.dumpRunStepsToJson(thread, run));

		// Comment out the deletion if you want to reuse the Assistant and Files in
		// https://platform.openai.com/assistants and https://platform.openai.com/files
		logger.info("8. Delete the demo resources.");
		fileApi.deleteFile(file.id());
		assistantApi.deleteThread(thread.id());
		assistantApi.deleteAssistant(assistant.id());

	}

}
